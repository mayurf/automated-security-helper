{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ASH","text":"<ul> <li>ASH; The Automated Security Helper</li> <li>Description</li> <li>Supported frameworks</li> <li>Prerequisites</li> <li>Getting Started</li> <li>Getting Started - Linux or MacOS</li> <li>Getting Started - Windows</li> <li>Cloud9 Quickstart Guide</li> <li>Using <code>ash</code> with <code>pre-commit</code></li> <li>Examples</li> <li>Synopsis</li> <li>FAQ</li> <li>Feedback</li> <li>Contributing</li> <li>Security</li> <li>License</li> </ul>"},{"location":"#ash-the-automated-security-helper","title":"ASH; The Automated Security Helper","text":""},{"location":"#description","title":"Description","text":"<p>The security helper tool was created to help you reduce the probability of a security violation in a new code, infrastructure or IAM configuration by providing a fast and easy tool to conduct  preliminary security check as early as possible within your development process.</p> <ul> <li>It is not a replacement of a human review nor standards enforced by your team/customer.</li> <li>It uses light, open source tools to maintain its flexibility and ability to run from anywhere.</li> <li>ASH is cloning and running different open-source tools, such as: git-secrets, bandit, Semgrep, Grype, Syft, nbconvert, npm-audit, checkov, cdk-nag and cfn-nag. Please review the tools LICENSE before usage.</li> </ul>"},{"location":"#supported-frameworks","title":"Supported frameworks","text":"<p>The security helper supports the following vectors:</p> <ul> <li>Code</li> <li>Git<ul> <li>git-secrets - Find api keys, passwords, AWS keys in the code</li> </ul> </li> <li>Python<ul> <li>bandit - finds common security issues in Python code.</li> <li>Semgrep - finds common security issues in Python code.</li> <li>Grype - finds vulnerabilities scanner for Python code.</li> <li>Syft - generating a Software Bill of Materials (SBOM) for Python code.</li> </ul> </li> <li>Jupyter Notebook<ul> <li>nbconvert - converts Jupyter Notebook (ipynb) files into Python executables. Code scan with Bandit.</li> </ul> </li> <li>JavaScript; NodeJS<ul> <li>npm-audit - checks for vulnerabilities in Javascript and NodeJS.</li> <li>Semgrep - finds common security issues in JavaScript code.</li> <li>Grype - finds vulnerabilities scanner for Javascript and NodeJS.</li> <li>Syft - generating a Software Bill of Materials (SBOM) for Javascript and NodeJS.</li> </ul> </li> <li>Go<ul> <li>Semgrep - finds common security issues in Golang code.</li> <li>Grype - finds vulnerabilities scanner for Golang.</li> <li>Syft - generating a Software Bill of Materials (SBOM) for Golang.</li> </ul> </li> <li>C#<ul> <li>Semgrep - finds common security issues in C# code.</li> </ul> </li> <li>Bash<ul> <li>Semgrep - finds common security issues in Bash code.</li> </ul> </li> <li>Java<ul> <li>Semgrep - finds common security issues in Java code.</li> <li>Grype - finds vulnerabilities scanner for Java.</li> <li>Syft - generating a Software Bill of Materials (SBOM) for Java.</li> </ul> </li> <li>Infrastructure</li> <li>Terraform; Cloudformation<ul> <li>checkov</li> <li>cfn_nag</li> <li>cdk-nag (via import of rendered CloudFormation templates into a custom CDK project with the AWS Solutions NagPack enabled)</li> </ul> </li> <li>Dockerfile<ul> <li>checkov</li> </ul> </li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>To start using <code>ash</code> please make sure to install and configure the following:</p> <ul> <li>Tools installed to run Linux containers, such as Finch, Rancher Desktop, Podman Desktop, or Docker Desktop.</li> <li>This can be any command-line interface (CLI) + container engine combination; there is nothing in ASH that requires a specific container runtime.</li> <li>If on Windows, you will also likely need Windows Subsystem for Linux (WSL) installed as a prerequisite for the listed container engine tools. Please see the specific instructions for the tool of choice regarding Windows-specific prerequisites.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#getting-started-linux-or-macos","title":"Getting Started - Linux or MacOS","text":"<p>Clone the git repository into a folder.  For example:</p> <pre><code># Set up some variables\nREPO_DIR=\"${HOME}\"/Documents/repos/reference\nREPO_NAME=automated-security-helper\n\n# Create a folder to hold reference git repositories\nmkdir -p ${REPO_DIR}\n\n# Clone the repository into the reference area\ngit clone https://github.com/awslabs/automated-security-helper \"${REPO_DIR}/${REPO_NAME}\"\n\n# Set the repo path in your shell for easier access\n#\n# Add this (and the variable settings above) to\n# your ~/.bashrc, ~/.bash_profile, ~/.zshrc, or similar\n# start-up scripts so that the ash tool is in your PATH\n# after re-starting or starting a new shell.\n#\nexport PATH=\"${PATH}:${REPO_DIR}/${REPO_NAME}\"\n\n# Execute the ash tool\nash --version\n</code></pre>"},{"location":"#getting-started-windows","title":"Getting Started - Windows","text":"<p>ASH uses containers, <code>bash</code> shell scripts, and multiple background processes running in parallel to run the multiple source code security scanning tools that it uses.  Because of this, running <code>ash</code> from either a <code>PowerShell</code> or <code>cmd</code> shell on Windows is not possible.  Furthermore, due to reliance on running containers, usually with Docker Desktop when running on Windows, there is an implicit dependency on having installed, configured, and operational a Windows Subsystem for Linux (WSL) 2 environment on the Windows machine where <code>ash</code> will be run.</p> <p>To use <code>ash</code> on Windows:</p> <ul> <li>Install, configure, and test the WSL 2 environment on Windows</li> <li>Install, configure, and test Docker Desktop for Windows, using the WSL 2 environment</li> <li>Use the Windows Terminal program and open a command-line window to interact with the WSL 2 environment</li> <li>Install and/or update the <code>git</code> client in the WSL 2 environment.  This should be pre-installed, but you may need to update the version   using the <code>apt-get update</code> command.</li> </ul> <p>Once the WSL2 command-line window is open, follow the steps above in Getting Started - Linux or MacOS to install and run <code>ash</code> in WSL 2 on the Windows machine.</p> <p>To run <code>ash</code>, open a Windows Terminal shell into the WSL 2 environment and use that command-line shell to run the <code>ash</code> command.</p> <p>Note: when working this way, be sure to <code>git clone</code> any git repositories to be scanned into the WSL 2 filesystem. Results are un-predictable if repositories or file sub-trees in the Windows filesystem are scanned using <code>ash</code> that is running in the WSL 2 environment.</p> <p>Tip: If you are using Microsoft VSCode for development, it is possible to configure a \"remote\" connection using VSCode into the WSL2 environment. By doing this, you can host your git repositories in WSL 2 and still work with them as you have in the past when they were in the Windows filesystem of your Windows machine.</p>"},{"location":"#cloud9-quickstart-guide","title":"Cloud9 Quickstart Guide","text":"<p>Follow the instruction in the quickstart page to deploy an AWS Cloud9 Environment with ASH pre-installed.</p>"},{"location":"#using-ash-with-pre-commit","title":"Using <code>ash</code> with <code>pre-commit</code>","text":"<p>The <code>ash</code> tool can be used interactively on a workstation or run using the <code>pre-commit</code> command. If <code>pre-commit</code> is used to run <code>ash</code>, then the <code>pre-commit</code> processing takes care of installing a copy of the <code>ash</code> git repository and setting up to run the <code>ash</code> program from that installed repository.  Using <code>pre-commit</code> still requires usage of WSL 2 when running on Windows.</p> <p>Using <code>ash</code> as a <code>pre-commit</code> hook enables development teams to use the <code>ash</code> tool in two ways.  First, developers can use <code>ash</code> as a part of their local development process on whatever development workstation or environment they are using.  Second, <code>ash</code> can be run in a build automation stage by running <code>pre-commit run --hook-stage manual ash</code> in build automation stage. When using <code>pre-commit</code>, run the <code>pre-commit</code> commands while in a folder/directory within the git repository that is configured with <code>pre-commit</code> hooks.</p> <p>Refer to the pre-commit-hooks file for information about the <code>pre-commit</code> hook itself.</p> <p>To configure a git repository to use the <code>ash</code> hook, start with the following <code>pre-commit-config</code> configuration:</p> <pre><code>  - repo: git@github.com:awslabs/automated-security-helper.git\n    rev: '1.1.0-e-01Dec2023' # update with the latest tagged version in the repository\n    hooks:\n    - id: ash\n      name: scan files using ash\n      stages: [ manual ]\n      # uncomment the line below if using \"finch\" on MacOS\n      # args: [ \"-f\" ]\n</code></pre> <p>Once the <code>.pre-commit-hooks.yaml</code> file is updated, the <code>ash</code> tool can be run using the following command:</p> <pre><code>pre-commit run --hook-stage manual ash\n</code></pre> <p>Results from the run of the <code>ash</code> tool can be found in the <code>aggregated_results.txt</code> file the <code>--output-dir</code> folder/directory.</p> <p>When ASH converts CloudFormation files into CDK and runs cdk-nag on them, the output of the cdk-nag check results are preserved in a 'ash_cf2cdk_output' folder/directory under <code>--output-dir</code> after the ASH scan is run.  This folder/directory is in addition to the <code>aggregated_results.txt</code> file found in <code>--output-dir</code>.</p>"},{"location":"#examples","title":"Examples","text":"<pre><code># Getting help\nash -h\n\n# Scan a directory\nash --source-dir /my/remote/files\n\n# Save the final report to a different directory\nash --output-dir /my/remote/files\n\n# Force rebuild the entire framework to obtain latests changes and up-to-date database\nash --force\n\n# Force run scan for Python code\nash --source-dir . --ext py\n\n* All commands can be used together.\n</code></pre>"},{"location":"#synopsis","title":"Synopsis","text":"<pre><code>NAME:\n        ash\nSYNOPSIS:\n        ash [OPTIONS] --source-dir /path/to/dir --output-dir /path/to/dir\nOPTIONS:\n        -v | --version           Prints version number.\n\n        -p | --preserve-report   Add timestamp to the final report file to avoid overwriting it after multiple executions.\n        --source-dir             Path to the directory containing the code/files you wish to scan. Defaults to $(pwd)\n        --output-dir             Path to the directory that will contain the report of the scans. Defaults to $(pwd)\n        --ext | -extension       Force a file extension to scan. Defaults to identify files automatically.\n        --offline                      Build ASH for offline execution. Defaults to false.\n        --offline-semgrep-rulesets     Specify Semgrep rulesets for use in ASH offline mode. Defaults to 'p/ci'.\n        --force                  Rebuild the Docker images of the scanning tools, to make sure software is up-to-date.\n        --no-cleanup             Don't cleanup the work directory where temp reports are stored during scans.\n        --debug                  Print ASH debug log information where applicable.\n        -q | --quiet             Don't print verbose text about the build process.\n        -c | --no-color          Don't print colorized output.\n        -s | --single-process    Run ash scanners serially rather than as separate, parallel sub-processes.\n        -o | --oci-runner        Use the specified OCI runner instead of docker to run the containerized tools.\n</code></pre>"},{"location":"#faq","title":"FAQ","text":"<ul> <li>Q: How to run <code>ash</code> on a Windows machine</li> </ul> <p>A: ASH on a windows machine</p> <ul> <li>Install a Windows Subsystem for Linux (WSL) 2 environment with a Ubuntu distribution. Be sure to use the WSL 2.</li> <li>Install Docker Desktop for windows and activate the integration the WSL 2</li> <li>Clone this git repo from a windows terminal via VPN (while in vpn it'll not connect to the repo directly from Ubuntu WSL 2).</li> <li> <p>Execute the helper tool from the folder downloaded in the previous step from the Ubuntu WSL.</p> </li> <li> <p>Q: How to run <code>ash</code> in a Continuous Integration/Continuous Deployment (CI/CD) pipline?</p> </li> </ul> <p>A: Check the ASH Pipeline solution</p> <ul> <li>Q: How to run <code>ash</code> with finch   or another Open Container Initiative (OCI) compatible tool.</li> </ul> <p>A: You can configure the OCI compatible tool to use with by using the environment variable <code>ASH_OCI_RUNNER</code></p> <ul> <li>Q: How to exclude files from scanning.</li> </ul> <p>A: <code>ash</code> will scan all the files in the folder specified in <code>--source-dir</code>, or the current directory if invoked without parameters. If the folder is a git repository,   then <code>ash</code> will use the exclusions in your <code>.gitignore</code> configuration file. If you want to exclude any specific folder, it must be added to your git ignore list before invoking <code>ash</code>.</p> <ul> <li>Q: <code>ash</code> reports there are not files to scan or you see a message stating <code>warning: You appear to have cloned an empty repository.</code></li> </ul> <p>A: Ensure you're running ASH inside the folder you intend to scan or using the <code>--source-dir</code> parameter. If the folder where the files reside is part of a git repository, ensure the files are added (committed) before running ASH.</p> <ul> <li>Q: How to run <code>ash</code> in an environment without internet connectivity/with an airgap?</li> </ul> <p>A: From your environment which does have internet connectivity, build the ASH image using <code>--offline</code> and <code>--offline-semgrep-rulesets</code> to specify what resources to package into the image.  Environment variable <code>$ASH_IMAGE_NAME</code> controls the name of the image.  After building, push to your container repository of choice which will be available within the airgapped environment.  When you go to execute ASH in your offline environment, passing <code>--no-build</code> to <code>ash</code> alongside <code>--offline</code> and <code>--offline-semgrep-rulesets</code> will use your offline image and skip the build.  Specify <code>$ASH_IMAGE_NAME</code> to override ASH's container image to the previously-built image available within your airgapped environment. </p>"},{"location":"#feedback","title":"Feedback","text":"<p>Create an issue here.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>See CONTRIBUTING for information on how to contribute to this project.</p>"},{"location":"#security","title":"Security","text":"<p>See CONTRIBUTING for more information.</p>"},{"location":"#license","title":"License","text":"<p>This library is licensed under the Apache 2.0 License. See the LICENSE file.</p>"},{"location":"contributing/","title":"Contributing Guidelines","text":"<p>Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community.</p> <p>Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.</p>"},{"location":"contributing/#reporting-bugsfeature-requests","title":"Reporting Bugs/Feature Requests","text":"<p>We welcome you to use the GitHub issue tracker to report bugs or suggest features.</p> <p>When filing an issue, please check existing open, or recently closed, issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful:</p> <ul> <li>A reproducible test case or series of steps</li> <li>The version of our code being used</li> <li>Any modifications you've made relevant to the bug</li> <li>Anything unusual about your environment or deployment</li> </ul>"},{"location":"contributing/#contributing-via-pull-requests","title":"Contributing via Pull Requests","text":"<p>Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that:</p> <ol> <li>You are working against the latest source on the <code>main</code> branch.</li> <li>You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.</li> <li>You open an issue to discuss any significant work - we would hate for your time to be wasted.</li> </ol> <p>To send us a pull request, please:</p> <ol> <li>Fork the repository.</li> <li>Create a branch in your fork where the branch name is something meaningful.  We encourage    the use of <code>feature/&lt;short-description&gt;</code>, <code>bugfix/&lt;short-description&gt;</code>, <code>hotfix/&lt;short-description&gt;</code>, and so on for branch naming.</li> <li>Modify the source; please focus on the specific change you are contributing. If you also reformat all the code,    it will be hard for us to focus on your change.</li> <li>Ensure local tests pass.</li> <li>Commit to your fork using clear commit messages.</li> <li>Send us a pull request, answering any default questions in the pull request interface.</li> <li>Pay attention to any automated continuous integration (CI) failures reported in the pull request, and stay involved in the conversation.</li> </ol> <p>GitHub provides additional documentation on forking a repository and creating a pull request.</p>"},{"location":"contributing/#finding-contributions-to-work-on","title":"Finding contributions to work on","text":"<p>Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project has adopted the Amazon Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.</p>"},{"location":"contributing/#security-issue-notifications","title":"Security issue notifications","text":"<p>If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page. Please do not create a public github issue.</p>"},{"location":"contributing/#licensing","title":"Licensing","text":"<p>See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution.</p> <p>We may ask you to sign a Contributor License Agreement (CLA) for larger changes.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<ul> <li>How can I run <code>ash</code> on a Windows machine?</li> <li>How can I run <code>ash</code> in a CI/CD pipline?</li> <li>How can I run <code>ash</code> with finch or another OCI compatible tool?</li> </ul>"},{"location":"faq/#how-can-i-run-ash-on-a-windows-machine","title":"How can I run <code>ash</code> on a Windows machine?","text":"<ol> <li>Install a Windows Subsystem for Linux (WSL) with an Ubuntu distribution. Be sure to use the WSL2.</li> <li>Install Docker Desktop for windows and activate the the WSL integration</li> <li>Clone this git repo from a windows terminal via VPN (while in vpn it'll not connect to the repo directly from Ubuntu WSL).</li> <li>Execute the helper tool from the folder downloaded in the previous step from the Ubuntu WSL.</li> </ol>"},{"location":"faq/#how-can-i-run-ash-in-a-cicd-pipline","title":"How can I run <code>ash</code> in a CI/CD pipline?","text":"<p>For CDK Pipeline, please refer to the ASH Pipeline solution available on GitHub.</p> <p>For additional CI pipeline support, please refer to the Running ASH in CI page on this site.</p>"},{"location":"faq/#how-can-i-run-ash-with-finch-or-another-oci-compatible-tool","title":"How can I run <code>ash</code> with finch or another OCI compatible tool?","text":"<p>You can configure the OCI compatible tool to use with by using the environment variable <code>OCI_RUNNER</code></p>"},{"location":"docs/prerequisites/","title":"Prerequisites","text":"<p>To start using <code>ash</code> please make sure to install and configure the following:</p> <ul> <li>Tools installed to run Linux containers, such as Finch, Rancher Desktop, Podman Desktop, or Docker Desktop.</li> <li>This can be any CLI + container engine combination; there is nothing in ASH that requires a specific container runtime.</li> <li>If on Windows, you will also likely need Windows Subsystem for Linux (WSL) installed as a prerequisite for the listed container engine tools. Please see the specific instructions for the tool of choice regarding Windows-specific prerequisites.</li> </ul>"},{"location":"docs/support/","title":"Support Matrix","text":"<p>ASH itself should support running in any environment that can support running <code>linux/amd64</code> container images.</p>"},{"location":"docs/support/#local-execution","title":"Local Execution","text":"<p>The table below provides a matrix of tested runtime environments for ASH.</p> OCI Container Tool Host Full Support Partial Support No Support Untested Finch macOS w/ Intel Finch macOS w/ Apple Silicon Docker Desktop macOS w/ Intel Docker Desktop macOS w/ Apple Silicon Rancher Desktop w/ docker+moby macOS w/ Intel Rancher Desktop w/ docker+moby macOS w/ Apple Silicon Rancher Desktop w/ nerdctl+containerd macOS w/ Intel Rancher Desktop w/ nerdctl+containerd macOS w/ Apple Silicon"},{"location":"docs/support/#continuous-integration","title":"Continuous Integration","text":"<p>The table below provides a matrix of tested CI execution environment for ASH.</p> <p>For more information, please see Running ASH in CI</p> CI Platform Execution Method Full Support Partial Support No Support Untested GitLab CI Container Job GitLab CI <code>docker run</code> GitHub Actions (hosted  Ubuntu agents) Container Job GitHub Actions (hosted  Ubuntu agents) <code>docker run</code> Azure Pipelines (hosted Ubuntu agents) Container Job Azure Pipelines (hosted Ubuntu agents) <code>docker run</code> Jenkins <code>docker run</code>"},{"location":"tutorials/cloud9-quickstart/","title":"Cloud9 Quickstart Guide","text":"<p>Follow the instruction in the quickstart page to deploy an AWS Cloud9 Environment with ASH pre-installed.</p>"},{"location":"tutorials/cloud9-quickstart/#using-ash-with-pre-commit","title":"Using <code>ash</code> with <code>pre-commit</code>","text":"<p>The <code>ash</code> tool can be used interactively on a workstation or run using the <code>pre-commit</code> command. If <code>pre-commit</code> is used to run <code>ash</code>, then the <code>pre-commit</code> processing takes care of installing a copy of the <code>ash</code> git repository and setting up to run the <code>ash</code> program from that installed repository.  Using <code>pre-commit</code> still requires usage of WSL 2 when running on Windows.</p> <p>Using <code>ash</code> as a <code>pre-commit</code> hook enables development teams to use the <code>ash</code> tool in two ways.  First, developers can use <code>ash</code> as a part of their local development process on whatever development workstation or environment they are using.  Second, <code>ash</code> can be run in a build automation stage by running <code>pre-commit run --hook-stage manual ash</code> in build automation stage. When using <code>pre-commit</code>, run the <code>pre-commit</code> commands while in a folder/directory within the git repository that is configured with <code>pre-commit</code> hooks.</p> <p>Refer to the pre-commit-hooks file for information about the <code>pre-commit</code> hook itself.</p> <p>To configure a git repository to use the <code>ash</code> hook, start with the following <code>pre-commit-config</code> configuration:</p> <pre><code>  - repo: https://github.com/awslabs/automated-security-helper.git\n    rev: 'v1.3.3' # update with the latest tagged version in the repository\n    hooks:\n    - id: ash\n      name: scan files using ash\n      stages: [ manual ]\n      # uncomment the line below if using \"finch\" on MacOS\n      # args: [ \"-f\" ]\n</code></pre> <p>Once the <code>.pre-commit-config.yaml</code> file is updated, the <code>ash</code> tool can be run using the following command:</p> <pre><code>pre-commit run --hook-stage manual ash\n</code></pre> <p>Results from the run of the <code>ash</code> tool can be found in the <code>aggregated_results.txt</code> file the <code>--output-dir</code> folder/directory.</p> <p>When ASH converts CloudFormation files into CDK and runs cdk-nag on them, the output of the cdk-nag check results are preserved in a 'ash_cf2cdk_output' folder/directory under <code>--output-dir</code> after the ASH scan is run.</p> <p>This folder/directory is in addition to the <code>aggregated_results.txt</code> file found in <code>--output-dir</code>.</p>"},{"location":"tutorials/running-ash-in-ci/","title":"Running ASH in a CI environment","text":""},{"location":"tutorials/running-ash-in-ci/#continuous-integration-ci-execution","title":"Continuous Integration (CI) Execution","text":"<p>ASH supports running in CI environments as an executable container (e.g. via <code>docker run</code>) as well as via Container Job mechanisms, depending on CI platform support.</p> <p>Within the CI folder, there are multiple examples of running ASH scans in various CI platforms. All examples include the following:</p> <ul> <li>ASH repository is cloned from GitHub alongside the repository to be scanned.</li> <li>ASH repository directory is added to <code>$PATH</code> so that <code>ash</code> is available to call directly.</li> <li><code>ash</code> is called to invoke the scan, which performs the following steps:<ol> <li>Creates the <code>ash_output</code> directory if it does not already exist</li> <li>Builds the ASH container image</li> <li>Runs the ASH scan using the built container image</li> <li>Generates the results in the <code>ash_output</code> directory</li> </ol> </li> <li>Once <code>ash</code> is complete, uploads <code>ash_output</code> directory as a build artifact.</li> </ul> <p>These examples are meant to show simple implementations that will enable quick integration of ASH into an application or infrastructure CI pipeline.</p> <p>Current examples provided by subfolder name:</p> <ul> <li>GitHub Actions (<code>.github/workflows/run-ash.yml</code>)<ul> <li>Job <code>containerjob</code>: Example shows how to run ASH with the ASH image itself used for the job execution. This aligns with the <code>ContainerJob</code> approach from Azure Pipelines and presents the <code>ash</code> script as a callable in PATH.</li> <li>Job <code>dockerrun</code>: Example shows how to run an ASH scan using generic <code>docker run</code> invocation (seen below)</li> </ul> </li> <li>GitLab CI (<code>.gitlab-ci.yml</code>)<ul> <li>Example file shows how to use the ASH image as the runner image in a GitLab CI job</li> </ul> </li> </ul>"},{"location":"tutorials/running-ash-in-ci/#ash-execution-environment-viability","title":"ASH Execution Environment Viability","text":"<p>If you are unsure whether ASH will run in your CI environment or not, the primary requirement is the ability to run Linux containers. This is typically true for most CI platforms, but self-hosted CI agents and enterprise security rules may restrict that ability. If you are unsure whether the CI platform you are using will support it, you can walk through the following flowchart for guidance:</p> <p></p>"},{"location":"tutorials/running-ash-locally/","title":"Running ASH Locally","text":"<p>Please see the Prerequisites page to ensure your local workspace is configured as needed before continuing.</p> <p>At a high-level, you need the ability to run <code>linux/amd64</code> containers in order to use ASH.</p>"},{"location":"tutorials/running-ash-locally/#linux-or-macos","title":"Linux or MacOS","text":"<p>Clone the git repository into a folder.  For example:</p> <pre><code># Set up some variables\nREPO_DIR=\"${HOME}\"/Documents/repos/reference\nREPO_NAME=automated-security-helper\n\n# Create a folder to hold reference git repositories\nmkdir -p ${REPO_DIR}\n\n# Clone the repository into the reference area\ngit clone https://github.com/awslabs/automated-security-helper.git \"${REPO_DIR}/${REPO_NAME}\"\n\n# Set the repo path in your shell for easier access\n#\n# Add this (and the variable settings above) to\n# your ~/.bashrc, ~/.bash_profile, ~/.zshrc, or similar\n# start-up scripts so that the ash tool is in your PATH\n# after re-starting or starting a new shell.\n#\nexport PATH=\"${PATH}:${REPO_DIR}/${REPO_NAME}\"\n\n# Execute the ash tool\nash --version\n</code></pre>"},{"location":"tutorials/running-ash-locally/#windows","title":"Windows","text":"<p>ASH uses containers, <code>bash</code> shell scripts, and multiple background processes running in parallel to run the multiple source code security scanning tools that it uses.  Because of this, running <code>ash</code> from either a <code>PowerShell</code> or <code>cmd</code> shell on Windows is not possible.  Furthermore, due to reliance on running containers, usually with Docker Desktop when running on Windows, there is an implicit dependency on having installed, configured, and operational a WSL2 (Windows System for Linux) environment on the Windows machine where <code>ash</code> will be run.</p> <p>To use <code>ash</code> on Windows:</p> <ul> <li>Install, configure, and test the WSL 2 environment on Windows</li> <li>Install, configure, and test Docker Desktop for Windows, using the WSL 2 environment</li> <li>Use the Windows Terminal program and open a command-line window to interact with the WSL 2 environment</li> <li>Install and/or update the <code>git</code> client in the WSL 2 environment.  This should be pre-installed, but you may need to update the version   using the <code>apt-get update</code> command.</li> </ul> <p>Once the WSL2 command-line window is open, follow the steps above in Getting Started - Linux or MacOS to install and run <code>ash</code> in WSL2 on the Windows machine.</p> <p>To run <code>ash</code>, open a Windows Terminal shell into the WSL 2 environment and use that command-line shell to run the <code>ash</code> command.</p> <p>Note: when working this way, be sure to <code>git clone</code> any git repositories to be scanned into the WSL2 filesystem. Results are un-predictable if repositories or file sub-trees in the Windows filesystem are scanned using <code>ash</code> that is running in the WSL2 environment.</p> <p>Tip: If you are using Microsoft VSCode for development, it is possible to configure a \"remote\" connection using VSCode into the WSL2 environment. By doing this, you can host your git repositories in WSL2 and still work with them as you have in the past when they were in the Windows filesystem of your Windows machine.</p>"}]}